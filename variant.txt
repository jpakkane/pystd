This can't be used yet, because pack indexing requires C++26 (GCC 15)

-------

#include<utility>
#include<string>

template<typename T1, typename T2>
constexpr int maxval(const T1 &a, const T2 &b) {
    return a > b ? a : b;
}

template<int index, typename ...T>
constexpr int compute_size() {
    if constexpr(index >= sizeof...(T)) {
        return 0;
    } else {
        return maxval(sizeof(T...[index]), compute_size<index+1, T...>());
    }
}

template<int index, typename ...T>
constexpr int compute_alignment() {
    if constexpr(index >= sizeof...(T)) {
        return 0;
    } else {
        return maxval(alignof(T...[index]), compute_alignment<index+1, T...>());
    }
}


constexpr int osize = compute_size<0, int, double, std::string>();
static_assert(osize == 32);
constexpr int oalign = compute_alignment<0, int, double, std::string>();
static_assert(oalign == 8);

template<typename ...T>
class MyVariant {
    public:

    int * get_int() {
        return reinterpret_cast<int*>(buf);
    }

    template<typename Desired, int index, typename...A>
    constexpr int get_index_for_type() {
        if constexpr(index >= sizeof...(T)) {
            static_assert(index < sizeof...(T));
        } else {
            if constexpr(std::is_same_v<Desired, T...[index]>) {
                return index;
            } else {
                return get_index_for_type<Desired, index+1>();
            }   
        }
    }

    template<int index>
    constexpr void destroy() {
        if constexpr(index < sizeof...(T)) {
            using curtype = T...[index];
            reinterpret_cast<curtype*>(buf)->~curtype();
        }
    }

    void blub(int x) {
        if(x == 0) {
            destroy<0>();
        }
        else if(x == 1) {
            destroy<1>();
        }
        else if(x == 2) {
            destroy<2>();
        }
    }

    template<typename Desired>
    Desired* get() {
        const int computed_type = get_index_for_type<Desired, 0>();
        if(computed_type == type) {
            return reinterpret_cast<Desired*>(buf);
        }
        return nullptr;
    }

private:
    int type;
    char buf[compute_size<0, T...>()] alignas(compute_alignment<0, T...>());
};

void func() {
    MyVariant<int, long> mv;
    int* guuguu = mv.get_int();
    int* guuguu2 = mv.get<int>();
    mv.blub(0);
}
